<?xml version="1.0" encoding="UTF-8"?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="title"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Basics of 2D graphics</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Basic line plot</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Generate</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>X</w:t></w:r><w:r><w:t> and</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>Y</w:t></w:r><w:r><w:t> vectors and make a line plot of</w:t></w:r><w:r><w:t> y vs.</w:t></w:r><w:r><w:t> x. The default is to connect the data points with a solid line.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x = 0:0.75:10; y = sin(x);
plot(x, y)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The line specifier</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>-o</w:t></w:r><w:r><w:t> plots a solid line with a circle marker at each data point. A grid is also added to the plot.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[plot(x, y, '-o')
grid on]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Always use the two-argument form  </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>plot(x, y)</w:t></w:r><w:r><w:t>. If you don't give the x vector, MATLAB uses </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>1...length(y)</w:t></w:r><w:r><w:t> as the x-coordinate, so you lose all information about the x values.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[plot(y)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Increasing the number of data points produces a smoother plot.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x = 0:0.1:10; y = sin(x);
plot(x, y), grid on]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Multiple plots</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We can make multiple plots with a single</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>plot</w:t></w:r><w:r><w:t> command. Plot a circle with different color halves. The plot appears elliptical since the axes lengths are different.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x = -1:0.05:1;
y1 = sqrt(1 - x.^2);
y2 = -sqrt(1 - x.^2);
plot(x, y1, x, y2)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Make the axes lengths the same.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[axis equal]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>axis</w:t></w:r><w:r><w:t> sets the axis limits in a figure.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[axis([-1 -0.4 -0.7 0.8])]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The line specifier</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>--</w:t></w:r><w:r><w:t> produces a dashed line.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[plot(x, y1, '--', x, y2)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>This also plots</w:t></w:r><w:r><w:t> y</w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>1</w:t></w:r><w:r><w:t> and</w:t></w:r><w:r><w:t> y</w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>2</w:t></w:r><w:r><w:t> into the same figure, now with a green dashed line with a square marker at the data points. Using this form you can't use separate line specifications for the graphs.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[plot(x, [y1; y2], 'g--s');]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>All plots after the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>hold on</w:t></w:r><w:r><w:t> command are overlaid on the same figure.</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>hold off</w:t></w:r><w:r><w:t> removes the effect of the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>hold on</w:t></w:r><w:r><w:t> command.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[plot(x, y1), hold on
plot(x, y2)
hold off]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Labeling plots</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The arguments for these self-explanatory commands are strings.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[xlabel('x-Axis')
ylabel('y-Axis')
title('This is a Circle')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>clf</w:t></w:r><w:r><w:t> command clears the figure window. Legend labels are assigned in the same order as the plots were generated.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
plot(x, y1, x, y2, '--')
legend('Top', 'Bottom')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We can change the location of the legend.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[legend('Top', 'Bottom', 'Location', 'SouthEast')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[legend('Top', 'Bottom', 'Location', 'NorthEastOutside')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We can also let Matlab decide what the best placement is.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[legend('Top', 'Bottom', 'Location', 'best')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Text strings for labels can include numerical values using </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>num2str</w:t></w:r><w:r><w:t> to convert the values to strings.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[r = 1; s = ['r is ', num2str(r)]
title(s)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>You can also use (a limited selection of) TeX commands in labels and title.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x1 = linspace(-1, 1, 100);
y = x1.^2;
plot(x1, y)
xlabel('x_1')
ylabel('x_1^2')
title('Plot of y = x_1^2')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>To get nicer looking text and mathematical symbols, we set the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>Interpreter</w:t></w:r><w:r><w:t> property to</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>latex</w:t></w:r><w:r><w:t>. Then TeX-commands must be enclosed in dollar-signs.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[plot(x1, y)
xlabel('$x_1$', 'Interpreter', 'latex', 'Fontsize', 14)
ylabel('$x_1^2$', 'Interpreter', 'latex', 'Fontsize', 14, 'Rotation', 0)
title('Plot of $y = x_1^2$', 'Interpreter', 'latex', 'Fontsize', 16)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>You can save the plot as a color eps file named </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>latextext.eps</w:t></w:r><w:r><w:t> with the command</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[print -depsc latextext]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Subplots</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We can arrange plots into a m x n grid with the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>subplot</w:t></w:r><w:r><w:t>-command. The subplots are numbered rowwise. Make a 2x2 grid of plots and also illustrate the different line styles available.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x = 0:0.01:10;
y = besselj(0, x);
subplot(2,2,1), plot(x, y, '-')
title('Subplot 1: Solid line')
subplot(2,2,2), plot(x, y, '--')
title('Subplot 2: Dashed line')
subplot(2,2,3), plot(x, y, ':')
title('Subplot 3: Dotted line')
subplot(2,2,4), plot(x, y, '-.')
title('Subplot 4: Dash-dot line')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>A 2x1 grid of plots. Note that we can drop the commas and write</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>subplot(211)</w:t></w:r><w:r><w:t> instead of</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>subplot(2,1,1)</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
x = 0:0.01:10;
subplot(211), plot(x, besselj(1, x), 'r')
subplot(212), plot(x, besselj(2, x), 'm')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>A 1x2 grid of plots.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
x = 0:0.01:10;
subplot(121), plot(x, besselj(0.5, x), 'c')
subplot(122), plot(x, besselj(1.5, x), 'y')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Subplots can be different sizes. Here the third subplot spans the second row.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
x = 0:0.01:10;
y = bessely(0, x);
subplot(221), plot(x, y, '-')
subplot(222), plot(x, y, '--')
subplot(2,2,[3,4]), plot(x, y, ':')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Here the first plot spans the first column.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
x = 0:0.1:10;
y = besselj(1, x);
subplot(2,2,[1,3]), plot(x, y, '-')
subplot(222), plot(x, y, '--')
subplot(224), plot(x, y, ':')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>You can also use the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>Position</w:t></w:r><w:r><w:t> property of the subplot command. The elements of the position vector are: left, bottom, width, height, and they are normalized between 0.0 and 1.0.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
x = 0:0.1:10;
y = bessely(1, x);
subplot('Position', [0.1, 0.2, 0.3, 0.6]), plot(x, y, '-')
subplot(222), plot(x, y, '--')
subplot(224), plot(x, y, ':')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Other types of plots</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Matlab has a large collection of plot types. Here are some of them.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Bar, stem, and stairs plot. Here </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>xlim</w:t></w:r><w:r><w:t> and </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>ylim</w:t></w:r><w:r><w:t> set the x-axis and y-axis limits, respectively.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
x = 0:0.75:10; y = cos(x);
subplot(221), bar(x, y), title('Bar Plot'), xlim([-1, 11])
subplot(222), barh(x, y), title('Horizontal Bar Plot'), ylim([-1, 11])
subplot(223), stem(x, y), title('Stem Plot')
subplot(224), stairs(x, y), title('Stairs Plot')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>For a matrix argument of m columns,</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>bar</w:t></w:r><w:r><w:t> plots the data as m groups.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
r = randi([1, 20], 10, 3);
bar(r)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The option</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>'stacked'</w:t></w:r><w:r><w:t> stacks the groups vertically.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[bar(r, 'stacked')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Histogram.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
r = randi([1, 7], 1000, 1);
histogram(r, 1:7)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Parametric plot</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[t = linspace(0, 2*pi, 100);
plot(cos(t), sin(t)), axis equal]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Polar plot</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[theta = linspace(0, 2*pi, 100);
rho = 0.5*(1 + 2*cos(theta));
polar(theta, rho)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Parametric 3D plot can be done with the command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>plot3</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
t = linspace(-5, 5, 1000);
xt = (1+t.^2).*sin(20*t);
yt = (1+t.^2).*cos(20*t);
zt = t;
plot3(xt, yt, zt, 'r')
xlabel('x(t)'), ylabel('y(t)'), zlabel('z(t)'), grid on]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Various logarithmic plots. Let us plot the magnitude of type II Chebyshev filter of order 4.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[w = 0:0.01:10; ww = 1./w;
T = 8*ww.^4 - 8*ww.^2 + 1;
e = 0.01;
G = 1./(1 + 1./(e^2*T.^2));
subplot(221); plot(w, G);      title('Linear x and y axis')
subplot(222); loglog(w, G);    title('Logarithmic x and y axis')
subplot(223); semilogx(w, G);  title('Logarithmic x axis')
subplot(224); semilogy(w, G);  title('Logarithmic y axis')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Easier function plotting: fplot and fimplicit.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>fplot</w:t></w:r><w:r><w:t> plots a function given by a function handle.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[fplot(@(x) sin(x + exp(-x)) - sin(x), [-5 1])]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The function should be vectorized, i.e., you should use dot multiplication, division, and power.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[fplot(@(x) (1 + 2*sin(x)).*cos(x), [0 4*pi], 'm')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Parametric curves can be plotted by giving function handles to the x- and y parametrization.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[R = 20; r = 1;
xt = @(t) (R-r)*cos(t) + r*cos((R-r)*t/r);
yt = @(t) (R-r)*sin(t) - r*sin((R-r)*t/r);
fplot(xt, yt, [0 2*pi])]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>3D parametric curves are plotted with </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>fplot3</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[a = 2; b = 1.5;
xt = @(t) (a + sin(b*t)).*cos(t);
yt = @(t) (a + sin(b*t)).*sin(t);
zt = @(t) cos(b*t);
fplot3(xt, yt, zt, [0 4*pi])]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>By default </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>fplot</w:t></w:r><w:r><w:t> shows asymptotes at the poles (if any) of the function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[subplot(121); fplot(@tan);
subplot(122); fplot(@cot);]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>You can turn off the display of asymptotes by setting the </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>ShowPoles</w:t></w:r><w:r><w:t> propety to </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>off</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
fplot(@tan, 'ShowPoles', 'off')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The adaptive plotting algorithm of </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>fplot</w:t></w:r><w:r><w:t> doesn't always work. Here the function oscillates wildly near the origin.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[func = @(x) sqrt(x.*sin(1./x));
x = linspace(-0.1, 0.1, 1e4);
plot(x, func(x));]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>fplot</w:t></w:r><w:r><w:t> doesn't catch the oscillations.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[fplot(func, [-0.1 0.1]);]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Increasing the MeshDensity property doesn't help. Increasing it even more doesn't improve the plot, but takes a lot longer.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[fplot(f, [-0.1 0.1], 'ShowPoles', 'off', 'MeshDensity', 200)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>fimplicit</w:t></w:r><w:r><w:t> plots curves given in implicit form </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>f(x, y) = 0</w:t></w:r></w:customXml><w:r><w:t>.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[f = @(x, y) (y.^2 - x.^2).*(x - 1).*(2*x - 3) - 4*(x.^2 + y.^2 - 2*x).^2;
fimplicit(f, [-0.4 1.6 -1.5 1.5])
title('The ampersand curve')
axis equal]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Graphic Objects</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Some basic drawing primitives.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>A yellow rectangle with the lower left corner at (-7, -0.2), width 2.5 and height 4.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
rectangle('Position', [-7 -0.2 2.5 4], 'FaceColor', 'y')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>A red line of width 2 between the points (-2, -0.4), (1, 3), (-4, 2), and (-4, -0.6). Note that it is added to the axes without erasing the previous contents. The first and second arguments are a vector of x- and y-coordinates, respectively.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[line([-2 1 -4 -4], [-0.4 3 2 -0.6], 'Color', 'r', 'LineWidth', 2);]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Polygons can be made with the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>patch</w:t></w:r><w:r><w:t> command. In the second patch command below, the last argument is a color specification that sets the face color to blue.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[xdata = [-7, -5.5, -4.5, -7.5];
ydata = [5.5, 5.5, 4, 4];
patch('XData', xdata, 'YData', ydata, 'FaceColor', 'none')
patch(xdata + 4, ydata - 1, 'b')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Text can be added with the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>text</w:t></w:r><w:r><w:t> command.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[text(-3, 4.7, 'A trapezoid')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Rectangles can have rounded corners. The curvatures must be in the interval</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>[0, 1]</w:t></w:r><w:r><w:t>. Setting the curvature to 1 gives an ellipse or a circle.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
rectangle('Position', [2 2 2 3], 'Curvature', [0.2, 0.6])
rectangle('Position', [0.5 1 1.4 4], 'Curvature', [1 1]) % An ellipse
rectangle('Position', [4.5 3 1 1], 'Curvature', [1 1])   % A circle
axis equal]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Let's make an anonymous function that draws a circle and takes optional arguments to set the properties of the circle.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[circle = @(c, r, varargin) rectangle('Position', [c(1)-r c(2)-r 2*r 2*r],...
    'Curvature', [1 1], varargin{:})]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Now we draw some circles.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf
circle([0 0], 2, 'FaceColor', 'c', 'LineWidth', 2, 'LineStyle', ':')
circle([-1 0.5], 0.5, 'FaceColor', 'blue', 'EdgeColor', 'y', 'LineWidth', 3)
circle([1 0.5], 0.5, 'FaceColor', 'blue', 'EdgeColor', 'y', 'LineWidth', 3)
circle([0 -1], 0.6, 'FaceColor', 'r', 'EdgeColor', 'm', 'LineWidth', 8)
axis equal]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Handle Graphics</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>A graphics object can be manipulated through a</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:i/></w:rPr><w:t>handle</w:t></w:r><w:r><w:t>, which is a reference to the object. A graphics object can be treated as a struct whose fields give the properties of the object.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The plot command returns a handle to the plot.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x = 0:0.01:2*pi; y = sin(x);
h = plot(x, y)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>get</w:t></w:r><w:r><w:t> shows the all the properties of a graphics object.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[get(h)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>You can set and get the properties with the dot-notation.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[h.LineStyle
h.LineWidth = 3;]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>You can also use the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>get</w:t></w:r><w:r><w:t> and</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>set</w:t></w:r><w:r><w:t> commands, although the dot-notation is preferred. The command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>get(h, 'PropertyName')</w:t></w:r><w:r><w:t> returns the value of the property</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>PropertyName</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[get(h, 'LineStyle')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>set</w:t></w:r><w:r><w:t> changes the properties of an object. The first argument is a handle to the object. The</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>set</w:t></w:r><w:r><w:t> command is useful if we want to change several properties at the same time. Here the line color is given as an RGB vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[set(h, 'Color', [0.5 0.5 0.5], 'LineStyle', '--')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>set(h, 'PropertyName')</w:t></w:r><w:r><w:t> shows the possible values of property</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>PropertyName,</w:t></w:r><w:r><w:t> if there are only a finite number of possible values.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[set(h, 'LineStyle')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The properties</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>XData</w:t></w:r><w:r><w:t> and</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>YData</w:t></w:r><w:r><w:t> hold the x- and y-coordinates of the plot. Here we sneakily change the plot of sine to the plot of cosine by changing the</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>YData</w:t></w:r><w:r><w:t> property.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x = h.XData;
h.YData = cos(x)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>For more than one plot in a figure,</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>plot</w:t></w:r><w:r><w:t> returns a vector of handles, a handle for each plot.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[x = 0:0.25:4*pi;
h = plot(x, sin(x), x, cos(x))
set(h(1), 'Marker', 'o', 'MarkerFaceColor', 'r', 'MarkerSize', 8)
set(h(2), 'Marker', 'd', 'MarkerFaceColor', 'b', 'MarkerSize', 8)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We could have set the properties with a single command.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[set(h, {'Marker', 'MarkerSize'}, {'p', 10; 'h', 12})]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>gca</w:t></w:r><w:r><w:t> (get current axis) returns a handle to the current axis. This gives the limits of the y-axis.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[get(gca, 'YLim')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>All the properties of the current axis.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[get(gca)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Set tick marks on the x-axis at multiples of</w:t></w:r><w:r><w:t> </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>\pi/2</w:t></w:r></w:customXml><w:r><w:t> and set the corresponding tick labels as TeX strings. Notice that the strings are given as a cell array.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[hax = gca
hax.XTick = (0:4)*pi;
hax.XTickLabel = {'0', '\pi', '2\pi', '3\pi', '4\pi'};]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We can access the axes of subplots by simply setting the output of each </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>subplot</w:t></w:r><w:r><w:t> command to a variable. Notice that we set the xticks of subplots 3 and 4 with a single </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>set</w:t></w:r><w:r><w:t>-command.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[h1 = subplot(221); fplot(@sec);   title('secant')
h2 = subplot(222); fplot(@csc);   title('cosecant')
h3 = subplot(223); fplot(@asec);  title('arc secant')
h4 = subplot(224); fplot(@acsc);  title('arc cosecant')

set(h1, 'Xtick', [-3 -1 1 3]*pi/2, 'XTickLabel',...
    {'-3\pi/2', '-\pi/2', '\pi/2', '3\pi/2'})
set(h2, 'Xtick', [-1 0 1]*pi, 'XTickLabel',...
    {'-\pi', '0', '\pi'})
set([h3 h4], 'Xtick', [-5 -1 1 5])]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The command</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>gcf</w:t></w:r><w:r><w:t> (get handle to current figure) returns a handle to the current figure.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[get(gcf, 'PaperUnits')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>All the properties of the current figure.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[get(gcf)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Adding User Interface Elements to a Figure</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Due to current limitations of the Live Editor we have to open a separate window for the UI elements to work. They don't work in the figures embedded in the Live Script.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[hf = figure('Visible', 'on')]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We make a plot an set its </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>ButtonDownFcn</w:t></w:r><w:r><w:t> property to the </w:t></w:r><w:r><w:rPr><w:b/></w:rPr><w:t>callback function</w:t></w:r><w:r><w:t> </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>toggleMarker</w:t></w:r><w:r><w:t> (at the end of the file). Then clicking on the plot toggles between showing the markers and hiding them.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[fplot(@sin, [0 2*pi], 'ButtonDownFcn', @toggleMarker)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Get a handle to the current axes.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[ha = gca;]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Next we set the </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>ButtonDownFcn</w:t></w:r><w:r><w:t> property of the axes object to a callback function that sets the background color of the axes to a random color (given as an RGB triplet) everytime the user clicks inside the axes area. Clicking in the figure outside the axes has no effect.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Notice that clicking on the plot toggles the marker but doesn't change the background color.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[ha.ButtonDownFcn = @(h, ~) set(h, 'Color', rand(1, 3));]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Next we make a Context Menu and assign to a plot. Then right-clicking the plot opens a context menu that allows the user to increase or decrease the line width.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>The callback functions </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>thicker</w:t></w:r><w:r><w:t> and </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>thinner</w:t></w:r><w:r><w:t> are usually called with two arguments, which we don't need in this case. The syntax</w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t> {@thicker, 3}</w:t></w:r><w:r><w:t> allows us to pass the third argument </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>incr</w:t></w:r><w:r><w:t>, which is the amount to increase the width. For </w:t></w:r><w:r><w:rPr><w:rFonts w:cs="monospace"/></w:rPr><w:t>thinner</w:t></w:r><w:r><w:t> we show an alternative way of passing extra arguments using an anonymous function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clf(hf)
cmh = uicontextmenu;
uimenu(cmh,'Text', 'Thicker', 'MenuSelectedFcn', {@thicker, 3});
uimenu(cmh,'Text', 'Thinner', 'MenuSelectedFcn',...
    @(src, evt) thinner(src, evt, 1));
fplot(@cos, [0 2*pi], 'UIContextMenu', cmh)   ]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[function toggleMarker(hObj, ~) % We don't need the second argument
    % Callback function for ButtonDownFcn that toggles the marker on/off
    
    if strcmpi(hObj.Marker, 'none')
        hObj.Marker = 'o';
    else
        hObj.Marker = 'none';
    end
end

function thicker(~, ~, incr) % We don't need the first two arguments
    % Callback function for the uimenu "Thicker"
    
    h = gco; % Get the current object
    h.LineWidth = h.LineWidth + incr;
end

function thinner(~, ~, decr) % We don't need the first two arguments
    % Callback function for the uimenu "Thinner"
    
    h = gco; % Get the current object
    w = h.LineWidth - decr;
    if w > 0
        h.LineWidth = w;
    end
end]]></w:t></w:r></w:p></w:body></w:document>